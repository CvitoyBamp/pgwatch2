# To demonstrate how to set up pgwatch2 in a loosely coupled way

version: "3"
services:
  postgres:
    image: postgres:14
    ports:
      - "15432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
  db-bootstrapper-configdb:
    image: cybertec/pgwatch2-db-bootstrapper:latest
    environment:
      PGHOST: postgres
      BOOTSTRAP_TYPE: configdb
      BOOTSTRAP_DATABASE: pgwatch2
      BOOTSTRAP_ADD_TEST_MONITORING_ENTRY: 1
    depends_on:
      - postgres
  psql:
    build: 'psql'
    environment:
      PGPASSWORD: pgwatch2
    depends_on:
      - postgres
      - db-bootstrapper-configdb
  webui:
    image: cybertec/pgwatch2-webui:latest
    environment:
      PW2_PGHOST: postgres
      PW2_WEBUSER: pgwatch2
      PW2_WEBPASSWORD: pgwatch2
      PW2_WEBNOANONYMOUS: true
      PW2_DATASTORE: prometheus
    ports:
      - "18080:8080"
    depends_on:
      - db-bootstrapper-configdb
  pgwatch2-daemon:
    image: cvitoybamp/pgwatch2:v1.0.0
    environment:
      PW2_VERBOSE: debug
      PW2_DATASTORE: prometheus
      PW2_PROMETHEUS_ASYNC_MODE: true
      PW2_PROMETHEUS_PORT: 9187
      PW2_PGHOST: postgres
    ports:
      - "18081:8081"
      - "18082:9187"
    depends_on:
      - db-bootstrapper-configdb
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - pgwatch2-daemon
      - webui
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/prometheus/datasource.yml:/etc/grafana/provisioning/datasources/main.yaml
      - ./grafana/prometheus/dashboards/dashboard.yml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/prometheus/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - pgwatch2-daemon
      - webui

  haproxy:
    build: 'haproxy'
    ports:
      - 5432:5432
      - 7000:7000
    depends_on:
      - zoo1
      - pg-master
      - pg-slave

  zoo1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zoo
    restart: always
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  pg-master:
    build: 'postgres'
    container_name: pg-master
    restart: always
    hostname: pg-master
    environment:
      PGHOST: pg-master
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: '/var/lib/postgresql/data/pgdata'
    expose:
      - 5432
      - 8008
    ports:
      - 5433:5432
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - '/var/lib/postgresql/data'
    command: patroni /postgres0.yml

  pg-slave:
    build: 'postgres'
    container_name: pg-slave
    restart: always
    hostname: pg-slave
    expose:
      - 5432
      - 8008
    ports:
      - 5434:5432
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - '/var/lib/postgresql/data'
    environment:
      PGHOST: pg-slave
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: '/var/lib/postgresql/data/pgdata'
    command: patroni /postgres1.yml
